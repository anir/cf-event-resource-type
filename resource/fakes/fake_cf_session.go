// This file was generated by counterfeiter
package fakes

import (
	"os"
	"sync"
	"time"

	"code.cloudfoundry.org/cli/cf/api"
	"code.cloudfoundry.org/cli/cf/api/appevents"
	"code.cloudfoundry.org/cli/cf/api/applicationbits"
	"code.cloudfoundry.org/cli/cf/api/applications"
	"code.cloudfoundry.org/cli/cf/api/organizations"
	"code.cloudfoundry.org/cli/cf/api/spaces"
	"code.cloudfoundry.org/cli/cf/models"
	"github.com/mevansam/cf-cli-api/cfapi"
)

type FakeCfSession struct {
	CloseStub                   func()
	closeMutex                  sync.RWMutex
	closeArgsForCall            []struct{}
	GetSessionLoggerStub        func() *cfapi.Logger
	getSessionLoggerMutex       sync.RWMutex
	getSessionLoggerArgsForCall []struct{}
	getSessionLoggerReturns     struct {
		result1 *cfapi.Logger
	}
	HasTargetStub        func() bool
	hasTargetMutex       sync.RWMutex
	hasTargetArgsForCall []struct{}
	hasTargetReturns     struct {
		result1 bool
	}
	SetSessionTargetStub        func(orgName, spaceName string) error
	setSessionTargetMutex       sync.RWMutex
	setSessionTargetArgsForCall []struct {
		orgName   string
		spaceName string
	}
	setSessionTargetReturns struct {
		result1 error
	}
	GetSessionUsernameStub        func() string
	getSessionUsernameMutex       sync.RWMutex
	getSessionUsernameArgsForCall []struct{}
	getSessionUsernameReturns     struct {
		result1 string
	}
	GetSessionOrgStub        func() models.OrganizationFields
	getSessionOrgMutex       sync.RWMutex
	getSessionOrgArgsForCall []struct{}
	getSessionOrgReturns     struct {
		result1 models.OrganizationFields
	}
	SetSessionOrgStub        func(models.OrganizationFields)
	setSessionOrgMutex       sync.RWMutex
	setSessionOrgArgsForCall []struct {
		arg1 models.OrganizationFields
	}
	GetSessionSpaceStub        func() models.SpaceFields
	getSessionSpaceMutex       sync.RWMutex
	getSessionSpaceArgsForCall []struct{}
	getSessionSpaceReturns     struct {
		result1 models.SpaceFields
	}
	SetSessionSpaceStub        func(models.SpaceFields)
	setSessionSpaceMutex       sync.RWMutex
	setSessionSpaceArgsForCall []struct {
		arg1 models.SpaceFields
	}
	OrganizationsStub        func() organizations.OrganizationRepository
	organizationsMutex       sync.RWMutex
	organizationsArgsForCall []struct{}
	organizationsReturns     struct {
		result1 organizations.OrganizationRepository
	}
	SpacesStub        func() spaces.SpaceRepository
	spacesMutex       sync.RWMutex
	spacesArgsForCall []struct{}
	spacesReturns     struct {
		result1 spaces.SpaceRepository
	}
	ServicesStub        func() api.ServiceRepository
	servicesMutex       sync.RWMutex
	servicesArgsForCall []struct{}
	servicesReturns     struct {
		result1 api.ServiceRepository
	}
	ServicePlansStub        func() api.ServicePlanRepository
	servicePlansMutex       sync.RWMutex
	servicePlansArgsForCall []struct{}
	servicePlansReturns     struct {
		result1 api.ServicePlanRepository
	}
	ServiceSummaryStub        func() api.ServiceSummaryRepository
	serviceSummaryMutex       sync.RWMutex
	serviceSummaryArgsForCall []struct{}
	serviceSummaryReturns     struct {
		result1 api.ServiceSummaryRepository
	}
	UserProvidedServicesStub        func() api.UserProvidedServiceInstanceRepository
	userProvidedServicesMutex       sync.RWMutex
	userProvidedServicesArgsForCall []struct{}
	userProvidedServicesReturns     struct {
		result1 api.UserProvidedServiceInstanceRepository
	}
	ServiceKeysStub        func() api.ServiceKeyRepository
	serviceKeysMutex       sync.RWMutex
	serviceKeysArgsForCall []struct{}
	serviceKeysReturns     struct {
		result1 api.ServiceKeyRepository
	}
	ServiceBindingsStub        func() api.ServiceBindingRepository
	serviceBindingsMutex       sync.RWMutex
	serviceBindingsArgsForCall []struct{}
	serviceBindingsReturns     struct {
		result1 api.ServiceBindingRepository
	}
	AppSummaryStub        func() api.AppSummaryRepository
	appSummaryMutex       sync.RWMutex
	appSummaryArgsForCall []struct{}
	appSummaryReturns     struct {
		result1 api.AppSummaryRepository
	}
	ApplicationsStub        func() applications.Repository
	applicationsMutex       sync.RWMutex
	applicationsArgsForCall []struct{}
	applicationsReturns     struct {
		result1 applications.Repository
	}
	ApplicationBitsStub        func() applicationbits.Repository
	applicationBitsMutex       sync.RWMutex
	applicationBitsArgsForCall []struct{}
	applicationBitsReturns     struct {
		result1 applicationbits.Repository
	}
	AppEventsStub        func() appevents.Repository
	appEventsMutex       sync.RWMutex
	appEventsArgsForCall []struct{}
	appEventsReturns     struct {
		result1 appevents.Repository
	}
	RoutesStub        func() api.RouteRepository
	routesMutex       sync.RWMutex
	routesArgsForCall []struct{}
	routesReturns     struct {
		result1 api.RouteRepository
	}
	DomainsStub        func() api.DomainRepository
	domainsMutex       sync.RWMutex
	domainsArgsForCall []struct{}
	domainsReturns     struct {
		result1 api.DomainRepository
	}
	GetAllEventsInSpaceStub        func(from time.Time) (events map[string]cfapi.CfEvent, err error)
	getAllEventsInSpaceMutex       sync.RWMutex
	getAllEventsInSpaceArgsForCall []struct {
		from time.Time
	}
	getAllEventsInSpaceReturns struct {
		result1 map[string]cfapi.CfEvent
		result2 error
	}
	GetAllEventsForAppStub        func(appGUID string, from time.Time) (event cfapi.CfEvent, err error)
	getAllEventsForAppMutex       sync.RWMutex
	getAllEventsForAppArgsForCall []struct {
		appGUID string
		from    time.Time
	}
	getAllEventsForAppReturns struct {
		result1 cfapi.CfEvent
		result2 error
	}
	GetServiceCredentialsStub        func(models.ServiceBindingFields) (*cfapi.ServiceBindingDetail, error)
	getServiceCredentialsMutex       sync.RWMutex
	getServiceCredentialsArgsForCall []struct {
		arg1 models.ServiceBindingFields
	}
	getServiceCredentialsReturns struct {
		result1 *cfapi.ServiceBindingDetail
		result2 error
	}
	DownloadAppContentStub        func(appGUID string, outputFile *os.File, asDroplet bool) error
	downloadAppContentMutex       sync.RWMutex
	downloadAppContentArgsForCall []struct {
		appGUID    string
		outputFile *os.File
		asDroplet  bool
	}
	downloadAppContentReturns struct {
		result1 error
	}
	UploadDropletStub        func(appGUID string, contentType string, dropletUploadRequest *os.File) error
	uploadDropletMutex       sync.RWMutex
	uploadDropletArgsForCall []struct {
		appGUID              string
		contentType          string
		dropletUploadRequest *os.File
	}
	uploadDropletReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCfSession) Close() {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		fake.CloseStub()
	}
}

func (fake *FakeCfSession) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeCfSession) GetSessionLogger() *cfapi.Logger {
	fake.getSessionLoggerMutex.Lock()
	fake.getSessionLoggerArgsForCall = append(fake.getSessionLoggerArgsForCall, struct{}{})
	fake.recordInvocation("GetSessionLogger", []interface{}{})
	fake.getSessionLoggerMutex.Unlock()
	if fake.GetSessionLoggerStub != nil {
		return fake.GetSessionLoggerStub()
	} else {
		return fake.getSessionLoggerReturns.result1
	}
}

func (fake *FakeCfSession) GetSessionLoggerCallCount() int {
	fake.getSessionLoggerMutex.RLock()
	defer fake.getSessionLoggerMutex.RUnlock()
	return len(fake.getSessionLoggerArgsForCall)
}

func (fake *FakeCfSession) GetSessionLoggerReturns(result1 *cfapi.Logger) {
	fake.GetSessionLoggerStub = nil
	fake.getSessionLoggerReturns = struct {
		result1 *cfapi.Logger
	}{result1}
}

func (fake *FakeCfSession) HasTarget() bool {
	fake.hasTargetMutex.Lock()
	fake.hasTargetArgsForCall = append(fake.hasTargetArgsForCall, struct{}{})
	fake.recordInvocation("HasTarget", []interface{}{})
	fake.hasTargetMutex.Unlock()
	if fake.HasTargetStub != nil {
		return fake.HasTargetStub()
	} else {
		return fake.hasTargetReturns.result1
	}
}

func (fake *FakeCfSession) HasTargetCallCount() int {
	fake.hasTargetMutex.RLock()
	defer fake.hasTargetMutex.RUnlock()
	return len(fake.hasTargetArgsForCall)
}

func (fake *FakeCfSession) HasTargetReturns(result1 bool) {
	fake.HasTargetStub = nil
	fake.hasTargetReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeCfSession) SetSessionTarget(orgName string, spaceName string) error {
	fake.setSessionTargetMutex.Lock()
	fake.setSessionTargetArgsForCall = append(fake.setSessionTargetArgsForCall, struct {
		orgName   string
		spaceName string
	}{orgName, spaceName})
	fake.recordInvocation("SetSessionTarget", []interface{}{orgName, spaceName})
	fake.setSessionTargetMutex.Unlock()
	if fake.SetSessionTargetStub != nil {
		return fake.SetSessionTargetStub(orgName, spaceName)
	} else {
		return fake.setSessionTargetReturns.result1
	}
}

func (fake *FakeCfSession) SetSessionTargetCallCount() int {
	fake.setSessionTargetMutex.RLock()
	defer fake.setSessionTargetMutex.RUnlock()
	return len(fake.setSessionTargetArgsForCall)
}

func (fake *FakeCfSession) SetSessionTargetArgsForCall(i int) (string, string) {
	fake.setSessionTargetMutex.RLock()
	defer fake.setSessionTargetMutex.RUnlock()
	return fake.setSessionTargetArgsForCall[i].orgName, fake.setSessionTargetArgsForCall[i].spaceName
}

func (fake *FakeCfSession) SetSessionTargetReturns(result1 error) {
	fake.SetSessionTargetStub = nil
	fake.setSessionTargetReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCfSession) GetSessionUsername() string {
	fake.getSessionUsernameMutex.Lock()
	fake.getSessionUsernameArgsForCall = append(fake.getSessionUsernameArgsForCall, struct{}{})
	fake.recordInvocation("GetSessionUsername", []interface{}{})
	fake.getSessionUsernameMutex.Unlock()
	if fake.GetSessionUsernameStub != nil {
		return fake.GetSessionUsernameStub()
	} else {
		return fake.getSessionUsernameReturns.result1
	}
}

func (fake *FakeCfSession) GetSessionUsernameCallCount() int {
	fake.getSessionUsernameMutex.RLock()
	defer fake.getSessionUsernameMutex.RUnlock()
	return len(fake.getSessionUsernameArgsForCall)
}

func (fake *FakeCfSession) GetSessionUsernameReturns(result1 string) {
	fake.GetSessionUsernameStub = nil
	fake.getSessionUsernameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeCfSession) GetSessionOrg() models.OrganizationFields {
	fake.getSessionOrgMutex.Lock()
	fake.getSessionOrgArgsForCall = append(fake.getSessionOrgArgsForCall, struct{}{})
	fake.recordInvocation("GetSessionOrg", []interface{}{})
	fake.getSessionOrgMutex.Unlock()
	if fake.GetSessionOrgStub != nil {
		return fake.GetSessionOrgStub()
	} else {
		return fake.getSessionOrgReturns.result1
	}
}

func (fake *FakeCfSession) GetSessionOrgCallCount() int {
	fake.getSessionOrgMutex.RLock()
	defer fake.getSessionOrgMutex.RUnlock()
	return len(fake.getSessionOrgArgsForCall)
}

func (fake *FakeCfSession) GetSessionOrgReturns(result1 models.OrganizationFields) {
	fake.GetSessionOrgStub = nil
	fake.getSessionOrgReturns = struct {
		result1 models.OrganizationFields
	}{result1}
}

func (fake *FakeCfSession) SetSessionOrg(arg1 models.OrganizationFields) {
	fake.setSessionOrgMutex.Lock()
	fake.setSessionOrgArgsForCall = append(fake.setSessionOrgArgsForCall, struct {
		arg1 models.OrganizationFields
	}{arg1})
	fake.recordInvocation("SetSessionOrg", []interface{}{arg1})
	fake.setSessionOrgMutex.Unlock()
	if fake.SetSessionOrgStub != nil {
		fake.SetSessionOrgStub(arg1)
	}
}

func (fake *FakeCfSession) SetSessionOrgCallCount() int {
	fake.setSessionOrgMutex.RLock()
	defer fake.setSessionOrgMutex.RUnlock()
	return len(fake.setSessionOrgArgsForCall)
}

func (fake *FakeCfSession) SetSessionOrgArgsForCall(i int) models.OrganizationFields {
	fake.setSessionOrgMutex.RLock()
	defer fake.setSessionOrgMutex.RUnlock()
	return fake.setSessionOrgArgsForCall[i].arg1
}

func (fake *FakeCfSession) GetSessionSpace() models.SpaceFields {
	fake.getSessionSpaceMutex.Lock()
	fake.getSessionSpaceArgsForCall = append(fake.getSessionSpaceArgsForCall, struct{}{})
	fake.recordInvocation("GetSessionSpace", []interface{}{})
	fake.getSessionSpaceMutex.Unlock()
	if fake.GetSessionSpaceStub != nil {
		return fake.GetSessionSpaceStub()
	} else {
		return fake.getSessionSpaceReturns.result1
	}
}

func (fake *FakeCfSession) GetSessionSpaceCallCount() int {
	fake.getSessionSpaceMutex.RLock()
	defer fake.getSessionSpaceMutex.RUnlock()
	return len(fake.getSessionSpaceArgsForCall)
}

func (fake *FakeCfSession) GetSessionSpaceReturns(result1 models.SpaceFields) {
	fake.GetSessionSpaceStub = nil
	fake.getSessionSpaceReturns = struct {
		result1 models.SpaceFields
	}{result1}
}

func (fake *FakeCfSession) SetSessionSpace(arg1 models.SpaceFields) {
	fake.setSessionSpaceMutex.Lock()
	fake.setSessionSpaceArgsForCall = append(fake.setSessionSpaceArgsForCall, struct {
		arg1 models.SpaceFields
	}{arg1})
	fake.recordInvocation("SetSessionSpace", []interface{}{arg1})
	fake.setSessionSpaceMutex.Unlock()
	if fake.SetSessionSpaceStub != nil {
		fake.SetSessionSpaceStub(arg1)
	}
}

func (fake *FakeCfSession) SetSessionSpaceCallCount() int {
	fake.setSessionSpaceMutex.RLock()
	defer fake.setSessionSpaceMutex.RUnlock()
	return len(fake.setSessionSpaceArgsForCall)
}

func (fake *FakeCfSession) SetSessionSpaceArgsForCall(i int) models.SpaceFields {
	fake.setSessionSpaceMutex.RLock()
	defer fake.setSessionSpaceMutex.RUnlock()
	return fake.setSessionSpaceArgsForCall[i].arg1
}

func (fake *FakeCfSession) Organizations() organizations.OrganizationRepository {
	fake.organizationsMutex.Lock()
	fake.organizationsArgsForCall = append(fake.organizationsArgsForCall, struct{}{})
	fake.recordInvocation("Organizations", []interface{}{})
	fake.organizationsMutex.Unlock()
	if fake.OrganizationsStub != nil {
		return fake.OrganizationsStub()
	} else {
		return fake.organizationsReturns.result1
	}
}

func (fake *FakeCfSession) OrganizationsCallCount() int {
	fake.organizationsMutex.RLock()
	defer fake.organizationsMutex.RUnlock()
	return len(fake.organizationsArgsForCall)
}

func (fake *FakeCfSession) OrganizationsReturns(result1 organizations.OrganizationRepository) {
	fake.OrganizationsStub = nil
	fake.organizationsReturns = struct {
		result1 organizations.OrganizationRepository
	}{result1}
}

func (fake *FakeCfSession) Spaces() spaces.SpaceRepository {
	fake.spacesMutex.Lock()
	fake.spacesArgsForCall = append(fake.spacesArgsForCall, struct{}{})
	fake.recordInvocation("Spaces", []interface{}{})
	fake.spacesMutex.Unlock()
	if fake.SpacesStub != nil {
		return fake.SpacesStub()
	} else {
		return fake.spacesReturns.result1
	}
}

func (fake *FakeCfSession) SpacesCallCount() int {
	fake.spacesMutex.RLock()
	defer fake.spacesMutex.RUnlock()
	return len(fake.spacesArgsForCall)
}

func (fake *FakeCfSession) SpacesReturns(result1 spaces.SpaceRepository) {
	fake.SpacesStub = nil
	fake.spacesReturns = struct {
		result1 spaces.SpaceRepository
	}{result1}
}

func (fake *FakeCfSession) Services() api.ServiceRepository {
	fake.servicesMutex.Lock()
	fake.servicesArgsForCall = append(fake.servicesArgsForCall, struct{}{})
	fake.recordInvocation("Services", []interface{}{})
	fake.servicesMutex.Unlock()
	if fake.ServicesStub != nil {
		return fake.ServicesStub()
	} else {
		return fake.servicesReturns.result1
	}
}

func (fake *FakeCfSession) ServicesCallCount() int {
	fake.servicesMutex.RLock()
	defer fake.servicesMutex.RUnlock()
	return len(fake.servicesArgsForCall)
}

func (fake *FakeCfSession) ServicesReturns(result1 api.ServiceRepository) {
	fake.ServicesStub = nil
	fake.servicesReturns = struct {
		result1 api.ServiceRepository
	}{result1}
}

func (fake *FakeCfSession) ServicePlans() api.ServicePlanRepository {
	fake.servicePlansMutex.Lock()
	fake.servicePlansArgsForCall = append(fake.servicePlansArgsForCall, struct{}{})
	fake.recordInvocation("ServicePlans", []interface{}{})
	fake.servicePlansMutex.Unlock()
	if fake.ServicePlansStub != nil {
		return fake.ServicePlansStub()
	} else {
		return fake.servicePlansReturns.result1
	}
}

func (fake *FakeCfSession) ServicePlansCallCount() int {
	fake.servicePlansMutex.RLock()
	defer fake.servicePlansMutex.RUnlock()
	return len(fake.servicePlansArgsForCall)
}

func (fake *FakeCfSession) ServicePlansReturns(result1 api.ServicePlanRepository) {
	fake.ServicePlansStub = nil
	fake.servicePlansReturns = struct {
		result1 api.ServicePlanRepository
	}{result1}
}

func (fake *FakeCfSession) ServiceSummary() api.ServiceSummaryRepository {
	fake.serviceSummaryMutex.Lock()
	fake.serviceSummaryArgsForCall = append(fake.serviceSummaryArgsForCall, struct{}{})
	fake.recordInvocation("ServiceSummary", []interface{}{})
	fake.serviceSummaryMutex.Unlock()
	if fake.ServiceSummaryStub != nil {
		return fake.ServiceSummaryStub()
	} else {
		return fake.serviceSummaryReturns.result1
	}
}

func (fake *FakeCfSession) ServiceSummaryCallCount() int {
	fake.serviceSummaryMutex.RLock()
	defer fake.serviceSummaryMutex.RUnlock()
	return len(fake.serviceSummaryArgsForCall)
}

func (fake *FakeCfSession) ServiceSummaryReturns(result1 api.ServiceSummaryRepository) {
	fake.ServiceSummaryStub = nil
	fake.serviceSummaryReturns = struct {
		result1 api.ServiceSummaryRepository
	}{result1}
}

func (fake *FakeCfSession) UserProvidedServices() api.UserProvidedServiceInstanceRepository {
	fake.userProvidedServicesMutex.Lock()
	fake.userProvidedServicesArgsForCall = append(fake.userProvidedServicesArgsForCall, struct{}{})
	fake.recordInvocation("UserProvidedServices", []interface{}{})
	fake.userProvidedServicesMutex.Unlock()
	if fake.UserProvidedServicesStub != nil {
		return fake.UserProvidedServicesStub()
	} else {
		return fake.userProvidedServicesReturns.result1
	}
}

func (fake *FakeCfSession) UserProvidedServicesCallCount() int {
	fake.userProvidedServicesMutex.RLock()
	defer fake.userProvidedServicesMutex.RUnlock()
	return len(fake.userProvidedServicesArgsForCall)
}

func (fake *FakeCfSession) UserProvidedServicesReturns(result1 api.UserProvidedServiceInstanceRepository) {
	fake.UserProvidedServicesStub = nil
	fake.userProvidedServicesReturns = struct {
		result1 api.UserProvidedServiceInstanceRepository
	}{result1}
}

func (fake *FakeCfSession) ServiceKeys() api.ServiceKeyRepository {
	fake.serviceKeysMutex.Lock()
	fake.serviceKeysArgsForCall = append(fake.serviceKeysArgsForCall, struct{}{})
	fake.recordInvocation("ServiceKeys", []interface{}{})
	fake.serviceKeysMutex.Unlock()
	if fake.ServiceKeysStub != nil {
		return fake.ServiceKeysStub()
	} else {
		return fake.serviceKeysReturns.result1
	}
}

func (fake *FakeCfSession) ServiceKeysCallCount() int {
	fake.serviceKeysMutex.RLock()
	defer fake.serviceKeysMutex.RUnlock()
	return len(fake.serviceKeysArgsForCall)
}

func (fake *FakeCfSession) ServiceKeysReturns(result1 api.ServiceKeyRepository) {
	fake.ServiceKeysStub = nil
	fake.serviceKeysReturns = struct {
		result1 api.ServiceKeyRepository
	}{result1}
}

func (fake *FakeCfSession) ServiceBindings() api.ServiceBindingRepository {
	fake.serviceBindingsMutex.Lock()
	fake.serviceBindingsArgsForCall = append(fake.serviceBindingsArgsForCall, struct{}{})
	fake.recordInvocation("ServiceBindings", []interface{}{})
	fake.serviceBindingsMutex.Unlock()
	if fake.ServiceBindingsStub != nil {
		return fake.ServiceBindingsStub()
	} else {
		return fake.serviceBindingsReturns.result1
	}
}

func (fake *FakeCfSession) ServiceBindingsCallCount() int {
	fake.serviceBindingsMutex.RLock()
	defer fake.serviceBindingsMutex.RUnlock()
	return len(fake.serviceBindingsArgsForCall)
}

func (fake *FakeCfSession) ServiceBindingsReturns(result1 api.ServiceBindingRepository) {
	fake.ServiceBindingsStub = nil
	fake.serviceBindingsReturns = struct {
		result1 api.ServiceBindingRepository
	}{result1}
}

func (fake *FakeCfSession) AppSummary() api.AppSummaryRepository {
	fake.appSummaryMutex.Lock()
	fake.appSummaryArgsForCall = append(fake.appSummaryArgsForCall, struct{}{})
	fake.recordInvocation("AppSummary", []interface{}{})
	fake.appSummaryMutex.Unlock()
	if fake.AppSummaryStub != nil {
		return fake.AppSummaryStub()
	} else {
		return fake.appSummaryReturns.result1
	}
}

func (fake *FakeCfSession) AppSummaryCallCount() int {
	fake.appSummaryMutex.RLock()
	defer fake.appSummaryMutex.RUnlock()
	return len(fake.appSummaryArgsForCall)
}

func (fake *FakeCfSession) AppSummaryReturns(result1 api.AppSummaryRepository) {
	fake.AppSummaryStub = nil
	fake.appSummaryReturns = struct {
		result1 api.AppSummaryRepository
	}{result1}
}

func (fake *FakeCfSession) Applications() applications.Repository {
	fake.applicationsMutex.Lock()
	fake.applicationsArgsForCall = append(fake.applicationsArgsForCall, struct{}{})
	fake.recordInvocation("Applications", []interface{}{})
	fake.applicationsMutex.Unlock()
	if fake.ApplicationsStub != nil {
		return fake.ApplicationsStub()
	} else {
		return fake.applicationsReturns.result1
	}
}

func (fake *FakeCfSession) ApplicationsCallCount() int {
	fake.applicationsMutex.RLock()
	defer fake.applicationsMutex.RUnlock()
	return len(fake.applicationsArgsForCall)
}

func (fake *FakeCfSession) ApplicationsReturns(result1 applications.Repository) {
	fake.ApplicationsStub = nil
	fake.applicationsReturns = struct {
		result1 applications.Repository
	}{result1}
}

func (fake *FakeCfSession) ApplicationBits() applicationbits.Repository {
	fake.applicationBitsMutex.Lock()
	fake.applicationBitsArgsForCall = append(fake.applicationBitsArgsForCall, struct{}{})
	fake.recordInvocation("ApplicationBits", []interface{}{})
	fake.applicationBitsMutex.Unlock()
	if fake.ApplicationBitsStub != nil {
		return fake.ApplicationBitsStub()
	} else {
		return fake.applicationBitsReturns.result1
	}
}

func (fake *FakeCfSession) ApplicationBitsCallCount() int {
	fake.applicationBitsMutex.RLock()
	defer fake.applicationBitsMutex.RUnlock()
	return len(fake.applicationBitsArgsForCall)
}

func (fake *FakeCfSession) ApplicationBitsReturns(result1 applicationbits.Repository) {
	fake.ApplicationBitsStub = nil
	fake.applicationBitsReturns = struct {
		result1 applicationbits.Repository
	}{result1}
}

func (fake *FakeCfSession) AppEvents() appevents.Repository {
	fake.appEventsMutex.Lock()
	fake.appEventsArgsForCall = append(fake.appEventsArgsForCall, struct{}{})
	fake.recordInvocation("AppEvents", []interface{}{})
	fake.appEventsMutex.Unlock()
	if fake.AppEventsStub != nil {
		return fake.AppEventsStub()
	} else {
		return fake.appEventsReturns.result1
	}
}

func (fake *FakeCfSession) AppEventsCallCount() int {
	fake.appEventsMutex.RLock()
	defer fake.appEventsMutex.RUnlock()
	return len(fake.appEventsArgsForCall)
}

func (fake *FakeCfSession) AppEventsReturns(result1 appevents.Repository) {
	fake.AppEventsStub = nil
	fake.appEventsReturns = struct {
		result1 appevents.Repository
	}{result1}
}

func (fake *FakeCfSession) Routes() api.RouteRepository {
	fake.routesMutex.Lock()
	fake.routesArgsForCall = append(fake.routesArgsForCall, struct{}{})
	fake.recordInvocation("Routes", []interface{}{})
	fake.routesMutex.Unlock()
	if fake.RoutesStub != nil {
		return fake.RoutesStub()
	} else {
		return fake.routesReturns.result1
	}
}

func (fake *FakeCfSession) RoutesCallCount() int {
	fake.routesMutex.RLock()
	defer fake.routesMutex.RUnlock()
	return len(fake.routesArgsForCall)
}

func (fake *FakeCfSession) RoutesReturns(result1 api.RouteRepository) {
	fake.RoutesStub = nil
	fake.routesReturns = struct {
		result1 api.RouteRepository
	}{result1}
}

func (fake *FakeCfSession) Domains() api.DomainRepository {
	fake.domainsMutex.Lock()
	fake.domainsArgsForCall = append(fake.domainsArgsForCall, struct{}{})
	fake.recordInvocation("Domains", []interface{}{})
	fake.domainsMutex.Unlock()
	if fake.DomainsStub != nil {
		return fake.DomainsStub()
	} else {
		return fake.domainsReturns.result1
	}
}

func (fake *FakeCfSession) DomainsCallCount() int {
	fake.domainsMutex.RLock()
	defer fake.domainsMutex.RUnlock()
	return len(fake.domainsArgsForCall)
}

func (fake *FakeCfSession) DomainsReturns(result1 api.DomainRepository) {
	fake.DomainsStub = nil
	fake.domainsReturns = struct {
		result1 api.DomainRepository
	}{result1}
}

func (fake *FakeCfSession) GetAllEventsInSpace(from time.Time) (events map[string]cfapi.CfEvent, err error) {
	fake.getAllEventsInSpaceMutex.Lock()
	fake.getAllEventsInSpaceArgsForCall = append(fake.getAllEventsInSpaceArgsForCall, struct {
		from time.Time
	}{from})
	fake.recordInvocation("GetAllEventsInSpace", []interface{}{from})
	fake.getAllEventsInSpaceMutex.Unlock()
	if fake.GetAllEventsInSpaceStub != nil {
		return fake.GetAllEventsInSpaceStub(from)
	} else {
		return fake.getAllEventsInSpaceReturns.result1, fake.getAllEventsInSpaceReturns.result2
	}
}

func (fake *FakeCfSession) GetAllEventsInSpaceCallCount() int {
	fake.getAllEventsInSpaceMutex.RLock()
	defer fake.getAllEventsInSpaceMutex.RUnlock()
	return len(fake.getAllEventsInSpaceArgsForCall)
}

func (fake *FakeCfSession) GetAllEventsInSpaceArgsForCall(i int) time.Time {
	fake.getAllEventsInSpaceMutex.RLock()
	defer fake.getAllEventsInSpaceMutex.RUnlock()
	return fake.getAllEventsInSpaceArgsForCall[i].from
}

func (fake *FakeCfSession) GetAllEventsInSpaceReturns(result1 map[string]cfapi.CfEvent, result2 error) {
	fake.GetAllEventsInSpaceStub = nil
	fake.getAllEventsInSpaceReturns = struct {
		result1 map[string]cfapi.CfEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeCfSession) GetAllEventsForApp(appGUID string, from time.Time) (event cfapi.CfEvent, err error) {
	fake.getAllEventsForAppMutex.Lock()
	fake.getAllEventsForAppArgsForCall = append(fake.getAllEventsForAppArgsForCall, struct {
		appGUID string
		from    time.Time
	}{appGUID, from})
	fake.recordInvocation("GetAllEventsForApp", []interface{}{appGUID, from})
	fake.getAllEventsForAppMutex.Unlock()
	if fake.GetAllEventsForAppStub != nil {
		return fake.GetAllEventsForAppStub(appGUID, from)
	} else {
		return fake.getAllEventsForAppReturns.result1, fake.getAllEventsForAppReturns.result2
	}
}

func (fake *FakeCfSession) GetAllEventsForAppCallCount() int {
	fake.getAllEventsForAppMutex.RLock()
	defer fake.getAllEventsForAppMutex.RUnlock()
	return len(fake.getAllEventsForAppArgsForCall)
}

func (fake *FakeCfSession) GetAllEventsForAppArgsForCall(i int) (string, time.Time) {
	fake.getAllEventsForAppMutex.RLock()
	defer fake.getAllEventsForAppMutex.RUnlock()
	return fake.getAllEventsForAppArgsForCall[i].appGUID, fake.getAllEventsForAppArgsForCall[i].from
}

func (fake *FakeCfSession) GetAllEventsForAppReturns(result1 cfapi.CfEvent, result2 error) {
	fake.GetAllEventsForAppStub = nil
	fake.getAllEventsForAppReturns = struct {
		result1 cfapi.CfEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeCfSession) GetServiceCredentials(arg1 models.ServiceBindingFields) (*cfapi.ServiceBindingDetail, error) {
	fake.getServiceCredentialsMutex.Lock()
	fake.getServiceCredentialsArgsForCall = append(fake.getServiceCredentialsArgsForCall, struct {
		arg1 models.ServiceBindingFields
	}{arg1})
	fake.recordInvocation("GetServiceCredentials", []interface{}{arg1})
	fake.getServiceCredentialsMutex.Unlock()
	if fake.GetServiceCredentialsStub != nil {
		return fake.GetServiceCredentialsStub(arg1)
	} else {
		return fake.getServiceCredentialsReturns.result1, fake.getServiceCredentialsReturns.result2
	}
}

func (fake *FakeCfSession) GetServiceCredentialsCallCount() int {
	fake.getServiceCredentialsMutex.RLock()
	defer fake.getServiceCredentialsMutex.RUnlock()
	return len(fake.getServiceCredentialsArgsForCall)
}

func (fake *FakeCfSession) GetServiceCredentialsArgsForCall(i int) models.ServiceBindingFields {
	fake.getServiceCredentialsMutex.RLock()
	defer fake.getServiceCredentialsMutex.RUnlock()
	return fake.getServiceCredentialsArgsForCall[i].arg1
}

func (fake *FakeCfSession) GetServiceCredentialsReturns(result1 *cfapi.ServiceBindingDetail, result2 error) {
	fake.GetServiceCredentialsStub = nil
	fake.getServiceCredentialsReturns = struct {
		result1 *cfapi.ServiceBindingDetail
		result2 error
	}{result1, result2}
}

func (fake *FakeCfSession) DownloadAppContent(appGUID string, outputFile *os.File, asDroplet bool) error {
	fake.downloadAppContentMutex.Lock()
	fake.downloadAppContentArgsForCall = append(fake.downloadAppContentArgsForCall, struct {
		appGUID    string
		outputFile *os.File
		asDroplet  bool
	}{appGUID, outputFile, asDroplet})
	fake.recordInvocation("DownloadAppContent", []interface{}{appGUID, outputFile, asDroplet})
	fake.downloadAppContentMutex.Unlock()
	if fake.DownloadAppContentStub != nil {
		return fake.DownloadAppContentStub(appGUID, outputFile, asDroplet)
	} else {
		return fake.downloadAppContentReturns.result1
	}
}

func (fake *FakeCfSession) DownloadAppContentCallCount() int {
	fake.downloadAppContentMutex.RLock()
	defer fake.downloadAppContentMutex.RUnlock()
	return len(fake.downloadAppContentArgsForCall)
}

func (fake *FakeCfSession) DownloadAppContentArgsForCall(i int) (string, *os.File, bool) {
	fake.downloadAppContentMutex.RLock()
	defer fake.downloadAppContentMutex.RUnlock()
	return fake.downloadAppContentArgsForCall[i].appGUID, fake.downloadAppContentArgsForCall[i].outputFile, fake.downloadAppContentArgsForCall[i].asDroplet
}

func (fake *FakeCfSession) DownloadAppContentReturns(result1 error) {
	fake.DownloadAppContentStub = nil
	fake.downloadAppContentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCfSession) UploadDroplet(appGUID string, contentType string, dropletUploadRequest *os.File) error {
	fake.uploadDropletMutex.Lock()
	fake.uploadDropletArgsForCall = append(fake.uploadDropletArgsForCall, struct {
		appGUID              string
		contentType          string
		dropletUploadRequest *os.File
	}{appGUID, contentType, dropletUploadRequest})
	fake.recordInvocation("UploadDroplet", []interface{}{appGUID, contentType, dropletUploadRequest})
	fake.uploadDropletMutex.Unlock()
	if fake.UploadDropletStub != nil {
		return fake.UploadDropletStub(appGUID, contentType, dropletUploadRequest)
	} else {
		return fake.uploadDropletReturns.result1
	}
}

func (fake *FakeCfSession) UploadDropletCallCount() int {
	fake.uploadDropletMutex.RLock()
	defer fake.uploadDropletMutex.RUnlock()
	return len(fake.uploadDropletArgsForCall)
}

func (fake *FakeCfSession) UploadDropletArgsForCall(i int) (string, string, *os.File) {
	fake.uploadDropletMutex.RLock()
	defer fake.uploadDropletMutex.RUnlock()
	return fake.uploadDropletArgsForCall[i].appGUID, fake.uploadDropletArgsForCall[i].contentType, fake.uploadDropletArgsForCall[i].dropletUploadRequest
}

func (fake *FakeCfSession) UploadDropletReturns(result1 error) {
	fake.UploadDropletStub = nil
	fake.uploadDropletReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCfSession) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.getSessionLoggerMutex.RLock()
	defer fake.getSessionLoggerMutex.RUnlock()
	fake.hasTargetMutex.RLock()
	defer fake.hasTargetMutex.RUnlock()
	fake.setSessionTargetMutex.RLock()
	defer fake.setSessionTargetMutex.RUnlock()
	fake.getSessionUsernameMutex.RLock()
	defer fake.getSessionUsernameMutex.RUnlock()
	fake.getSessionOrgMutex.RLock()
	defer fake.getSessionOrgMutex.RUnlock()
	fake.setSessionOrgMutex.RLock()
	defer fake.setSessionOrgMutex.RUnlock()
	fake.getSessionSpaceMutex.RLock()
	defer fake.getSessionSpaceMutex.RUnlock()
	fake.setSessionSpaceMutex.RLock()
	defer fake.setSessionSpaceMutex.RUnlock()
	fake.organizationsMutex.RLock()
	defer fake.organizationsMutex.RUnlock()
	fake.spacesMutex.RLock()
	defer fake.spacesMutex.RUnlock()
	fake.servicesMutex.RLock()
	defer fake.servicesMutex.RUnlock()
	fake.servicePlansMutex.RLock()
	defer fake.servicePlansMutex.RUnlock()
	fake.serviceSummaryMutex.RLock()
	defer fake.serviceSummaryMutex.RUnlock()
	fake.userProvidedServicesMutex.RLock()
	defer fake.userProvidedServicesMutex.RUnlock()
	fake.serviceKeysMutex.RLock()
	defer fake.serviceKeysMutex.RUnlock()
	fake.serviceBindingsMutex.RLock()
	defer fake.serviceBindingsMutex.RUnlock()
	fake.appSummaryMutex.RLock()
	defer fake.appSummaryMutex.RUnlock()
	fake.applicationsMutex.RLock()
	defer fake.applicationsMutex.RUnlock()
	fake.applicationBitsMutex.RLock()
	defer fake.applicationBitsMutex.RUnlock()
	fake.appEventsMutex.RLock()
	defer fake.appEventsMutex.RUnlock()
	fake.routesMutex.RLock()
	defer fake.routesMutex.RUnlock()
	fake.domainsMutex.RLock()
	defer fake.domainsMutex.RUnlock()
	fake.getAllEventsInSpaceMutex.RLock()
	defer fake.getAllEventsInSpaceMutex.RUnlock()
	fake.getAllEventsForAppMutex.RLock()
	defer fake.getAllEventsForAppMutex.RUnlock()
	fake.getServiceCredentialsMutex.RLock()
	defer fake.getServiceCredentialsMutex.RUnlock()
	fake.downloadAppContentMutex.RLock()
	defer fake.downloadAppContentMutex.RUnlock()
	fake.uploadDropletMutex.RLock()
	defer fake.uploadDropletMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeCfSession) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cfapi.CfSession = new(FakeCfSession)
