// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"

	"github.com/mevansam/cf-cli-api/filters"
)

type FakeEventFilter struct {
	GetEventsForAllAppsInSpaceStub        func(from time.Time) ([]filters.AppEvent, error)
	getEventsForAllAppsInSpaceMutex       sync.RWMutex
	getEventsForAllAppsInSpaceArgsForCall []struct {
		from time.Time
	}
	getEventsForAllAppsInSpaceReturns struct {
		result1 []filters.AppEvent
		result2 error
	}
	GetEventsForAppStub        func(appGUID string, from time.Time) ([]filters.AppEvent, error)
	getEventsForAppMutex       sync.RWMutex
	getEventsForAppArgsForCall []struct {
		appGUID string
		from    time.Time
	}
	getEventsForAppReturns struct {
		result1 []filters.AppEvent
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEventFilter) GetEventsForAllAppsInSpace(from time.Time) ([]filters.AppEvent, error) {
	fake.getEventsForAllAppsInSpaceMutex.Lock()
	fake.getEventsForAllAppsInSpaceArgsForCall = append(fake.getEventsForAllAppsInSpaceArgsForCall, struct {
		from time.Time
	}{from})
	fake.recordInvocation("GetEventsForAllAppsInSpace", []interface{}{from})
	fake.getEventsForAllAppsInSpaceMutex.Unlock()
	if fake.GetEventsForAllAppsInSpaceStub != nil {
		return fake.GetEventsForAllAppsInSpaceStub(from)
	} else {
		return fake.getEventsForAllAppsInSpaceReturns.result1, fake.getEventsForAllAppsInSpaceReturns.result2
	}
}

func (fake *FakeEventFilter) GetEventsForAllAppsInSpaceCallCount() int {
	fake.getEventsForAllAppsInSpaceMutex.RLock()
	defer fake.getEventsForAllAppsInSpaceMutex.RUnlock()
	return len(fake.getEventsForAllAppsInSpaceArgsForCall)
}

func (fake *FakeEventFilter) GetEventsForAllAppsInSpaceArgsForCall(i int) time.Time {
	fake.getEventsForAllAppsInSpaceMutex.RLock()
	defer fake.getEventsForAllAppsInSpaceMutex.RUnlock()
	return fake.getEventsForAllAppsInSpaceArgsForCall[i].from
}

func (fake *FakeEventFilter) GetEventsForAllAppsInSpaceReturns(result1 []filters.AppEvent, result2 error) {
	fake.GetEventsForAllAppsInSpaceStub = nil
	fake.getEventsForAllAppsInSpaceReturns = struct {
		result1 []filters.AppEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeEventFilter) GetEventsForApp(appGUID string, from time.Time) ([]filters.AppEvent, error) {
	fake.getEventsForAppMutex.Lock()
	fake.getEventsForAppArgsForCall = append(fake.getEventsForAppArgsForCall, struct {
		appGUID string
		from    time.Time
	}{appGUID, from})
	fake.recordInvocation("GetEventsForApp", []interface{}{appGUID, from})
	fake.getEventsForAppMutex.Unlock()
	if fake.GetEventsForAppStub != nil {
		return fake.GetEventsForAppStub(appGUID, from)
	} else {
		return fake.getEventsForAppReturns.result1, fake.getEventsForAppReturns.result2
	}
}

func (fake *FakeEventFilter) GetEventsForAppCallCount() int {
	fake.getEventsForAppMutex.RLock()
	defer fake.getEventsForAppMutex.RUnlock()
	return len(fake.getEventsForAppArgsForCall)
}

func (fake *FakeEventFilter) GetEventsForAppArgsForCall(i int) (string, time.Time) {
	fake.getEventsForAppMutex.RLock()
	defer fake.getEventsForAppMutex.RUnlock()
	return fake.getEventsForAppArgsForCall[i].appGUID, fake.getEventsForAppArgsForCall[i].from
}

func (fake *FakeEventFilter) GetEventsForAppReturns(result1 []filters.AppEvent, result2 error) {
	fake.GetEventsForAppStub = nil
	fake.getEventsForAppReturns = struct {
		result1 []filters.AppEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeEventFilter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getEventsForAllAppsInSpaceMutex.RLock()
	defer fake.getEventsForAllAppsInSpaceMutex.RUnlock()
	fake.getEventsForAppMutex.RLock()
	defer fake.getEventsForAppMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeEventFilter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ filters.EventFilter = new(FakeEventFilter)
